{"version":3,"sources":["webpack/bootstrap 3acbf734a259a81d62e5","./js/main.js","./js/viral-view.js","./js/board.js","./js/viral.js","./js/coord.js","./js/virus.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;ACLD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;;AAEA,kBAAiB,qBAAqB;AACtC;AACA,oBAAmB,qBAAqB;AACxC,uCAAsC,aAAa,GAAG,aAAa;AACnE;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AClEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,kBAAiB,UAAU;AAC3B;AACA,oBAAmB,UAAU;AAC7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AChCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mDAAkD,wBAAwB;AAC1E,uBAAsB,WAAW,GAAG,WAAW;AAC/C;AACA;;;AAGA;AACA,qDAAoD,qBAAqB;AACzE;AACA;;;AAGA;;;;;;;ACzBA;AACA;AACA;AACA;;AAEA;AACA;AACA,G;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C;AAC3C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uDAAsD,wBAAwB;AAC9E,yBAAwB,WAAW,GAAG,WAAW;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,YAAY;AAClD;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAwB,YAAY,GAAG,YAAY;AACnD;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mDAAkD,wBAAwB;AAC1E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 3acbf734a259a81d62e5\n **/","const ViralView = require('./viral-view');\n\n$(function () {\n  const rootEl = $('.viral');\n  new ViralView(rootEl);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/main.js\n ** module id = 0\n ** module chunks = 0\n **/","const Board = require('./board.js');\nconst Viral = require('./viral.js');\n\nconst View = function ($el) {\n  this.$el = $el;\n\n  this.board = new Board(4);\n  this.setupGrid();\n  $(\".cell\").click(this.handleClick.bind(this));\n  this.viral = new Viral(this.board);\n\n  $( \"#clear-button\" ).click(this.clearBoard.bind(this));\n\n  requestAnimationFrame(\n    this.render.bind(this)\n  );\n};\n\n\nView.prototype.render = function () {\n  this.$el.html(this.board.render());\n  requestAnimationFrame(\n    this.render.bind(this)\n  );\n};\n\n\nView.prototype.clearBoard = function () {\n  window.location.reload();\n  window.setTimeout(() => {\n    const rootEl = $('.viral');\n    new View(rootEl);\n  }, 1000);\n};\n\nView.prototype.setupGrid = function () {\n  let html = \"\";\n\n  for (let i = 0; i < this.board.size; i++) {\n    html += \"<ul>\";\n    for (let j = 0; j < this.board.size; j++) {\n      html += `<li class='cell' id=\"${i.toString()}-${j.toString()}\"></li>`;\n    }\n    html += \"</ul>\";\n  }\n\n  this.$el.html(html);\n  this.$li = this.$el.find(\"li\");\n};\n\n\n\nView.prototype.infectionType = function () {\n  this.strain = $(\"form input:radio:checked\").val();\n};\n\nView.prototype.handleClick = function (event) {\n  //takes a click and starts the infection there\n  if (event.currentTarget.className.includes(this.strain)) {\n    alert('You cannot initiate an infection where there already is one.');\n  }\n  else {\n    $(event.currentTarget).addClass(this.strain);\n    this.viral.infection(event.currentTarget.id);\n  }\n};\n\nmodule.exports = View;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/viral-view.js\n ** module id = 1\n ** module chunks = 0\n **/","\nfunction Board(size) {\n  size = 100;\n  this.size = size;\n}\n\nBoard.BLANK_SYMBOL = \"O\";\n\nBoard.blankGrid = function (size) {\n  const grid = [];\n\n  for (let i = 0; i < size; i++) {\n    const row = [];\n    for (let j = 0; j < size; j++) {\n      row.push(Board.BLANK_SYMBOL);\n    }\n    grid.push(row);\n  }\n\n  return grid;\n};\n\nBoard.prototype.render = function () {\n  const grid = Board.blankGrid(this.size);\n\n  grid.map( row => row.join(\"\") ).join(\"\\n\");\n};\n\nBoard.prototype.returnSize = function () {\n  return this.size;\n};\n\nmodule.exports = Board;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/board.js\n ** module id = 2\n ** module chunks = 0\n **/","const Coord = require('./coord');\nconst Virus = require('./virus');\nconst Board = require('./board');\n\nfunction Viral(board) {\n  this.livingCells = [];\n  this.virii = [];\n  this.board = board;\n}\n\nViral.prototype.infection = function (coords) {\n  let strain = $(\"form input:radio:checked\").val();\n  new Virus(coords, strain);\n  let coordID = coords.split('-').map((coord) => {return parseInt(coord);});\n  let element = $(`#${coordID[0]}-${coordID[1]}`);\n  $(element).addClass(strain);\n};\n\n\nViral.prototype.addCoords = function (coords) {\n  let parsedCoords = coords.split('-').map((el) => {return parseInt(el);});\n  this.livingCells.push(parsedCoords);\n};\n\n\nmodule.exports = Viral;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/viral.js\n ** module id = 3\n ** module chunks = 0\n **/","function Coord (i, j) {\n  this.i = i;\n  this.j = j;\n}\n\nCoord.prototype.equals = function(coord2) {\n\treturn (this.i == coord2.i) && (this.j == coord2.j);\n}; \n\nCoord.prototype.isOpposite = function (coord2) {\n  return (this.i == (-1 * coord2.i)) && (this.j == (-1 * coord2.j));\n};\n\nCoord.prototype.plus = function (coord2) {\n  return new Coord(this.i + coord2.i, this.j + coord2.j);\n};\n\nmodule.exports = Coord;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/coord.js\n ** module id = 4\n ** module chunks = 0\n **/","function Virus(coords, strain) {\n  this.coords = coords;\n  this.strain = strain;\n  this.adjacentCellsToInfect = [];\n  this.startInfection();\n  let self = this;\n  this.fadeColor(self.parseCoords(coords)); //this is broken\n}\n\nVirus.INFECTION_VALS = {\n  \"virus\": 7.0,\n  \"bacteria\": 6.0,\n  \"parasite\": 4.0\n};\n\nVirus.DIFFS = [\n  [-1, 0],\n  [0, 1],\n  [1, 0],\n  [0, -1],\n  [-1, 1],\n  [1, -1],\n  [1, 1],\n  [-1, -1]\n];\n\nVirus.propagationSpeeds = {\n  \"virus\": 400,\n  \"bacteria\": 800,\n  \"parasite\": 1000\n};\n\nVirus.prototype.startInfection = function () {\n  window.setTimeout(() => {\n    this.getAdjacentCells();\n    this.infectAdjacentCells();\n  }, Virus.propagationSpeeds[this.strain]);\n};\n\nVirus.prototype.live = function () {\n  let chance = Math.random() * 10.0;\n  if (Virus.INFECTION_VALS[this.strain] > chance){\n    return true;\n  }\n  else {\n    return false;\n  }\n};\n\nVirus.prototype.infectAdjacentCells = function () {\n  let self = this;\n  this.adjacentCellsToInfect.forEach((htmel) => {\n    let coordID = htmel.id.split('-').map((coord) => {return parseInt(coord);});\n    let element = $(`#${coordID[0]}-${coordID[1]}`);\n    if (this.live()){\n      $(element).addClass(self.strain);\n      let virii = new Virus(htmel.id, self.strain);\n      this.fadeColor(element);\n    }\n    else {\n      if (!(self.strain === 'parasite')){\n        $(element).addClass(`immune ${self.strain}`);\n      }\n    }\n  });\n};\n\nVirus.prototype.getAdjacentCells = function () {\n  const self = this;\n  Virus.DIFFS.forEach((diff) => {\n    let parsedCoords = this.parseCoords(self.coords);\n    let newCoord = [(diff[0] + parsedCoords[0]), (diff[1] + parsedCoords[1])];\n    let element = $(`#${newCoord[0]}-${newCoord[1]}`)[0];\n    if ( element !== undefined && !(element.className.includes(self.strain)) && this.strainRules(element) && this.notImmune(element)) {\n      self.adjacentCellsToInfect.push(element);\n    }\n  });\n};\n\nVirus.prototype.strainRules = function (element) {\n  let elementStrain = $(element);\n  if (this.strain === 'bacteria' && element.className.includes('parasite')) {\n    return false;\n  }\n  else if (this.strain === 'virus' && element.className.includes('bacteria')) {\n    return false;\n  }\n  else if (this.strain === 'virus' && element.className.includes('parasite')) {\n    return false;\n  }\n  else if (this.strain === 'parasite') {\n    return true;\n  }\n  else if (this.strain === 'bacteria' && element.className.includes('virus')) {\n    return true;\n  }\n  else {\n    return true;\n  }\n};\n\nVirus.prototype.notImmune = function (element) {\n  let elementStrain = $(element);\n  if (element.className.includes('immune')){\n    return false;\n  }\n  else {\n    return true;\n  }\n};\n\nVirus.prototype.parseCoords = function (coordString) {\n    return coordString.split('-').map((coord) => {return parseInt(coord);});\n};\n\nVirus.prototype.death = function (coordString) {\n  let chance = Math.random();\n  switch (this.strain) {\n    case \"virus\":\n      return (chance > 0.65);\n    case \"bacteria\":\n      return (chance > 0.8);\n    case \"parasite\":\n      return (chance > 0.95);\n    default:\n      break;\n    }\n};\n\nVirus.prototype.fadeColor = function (element) {\n  let classesToUse = this.strainToDisplay();\n\n  window.setTimeout(() => {\n    $(element).addClass(classesToUse[0]);\n  }, 3000);\n\n  window.setTimeout(() => {\n    $(element).removeClass(classesToUse[0]);\n    $(element).addClass(classesToUse[1]);\n  }, 6000);\n\n  if (this.death()) {\n    window.setTimeout(() => {\n      $(element).removeClass(classesToUse[1]);\n      $(element).addClass(classesToUse[2]);\n    }, 25000);\n  }\n};\n\nVirus.prototype.strainToDisplay = function () {\n  switch (this.strain) {\n    case \"virus\":\n      return [\"v1\", \"v2\", \"v3\"];\n    case \"bacteria\":\n      return [\"b1\", \"b2\", \"b3\"];\n    case \"parasite\":\n      return [\"p1\", \"p2\", \"p3\"];\n    default:\n      break;\n  }\n};\n\nmodule.exports = Virus;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/virus.js\n ** module id = 5\n ** module chunks = 0\n **/"],"sourceRoot":""}